https://www.freecodecamp.org/news/what-is-git-learn-git-version-control/
https://www.youtube.com/watch?v=RGOj5yH7evk&t=715s


BASICS

Git: Version Control System that is used to save and t=store snapshots/versions of our project in local/remote repositories

GitHub,GitLab, etc: They are hosting services that are used to store and share out local repositories for collaboration with other developers

.git: It is Git repository which tracks all the changes that are made to the project folder
      The .git repo in our computer is the local repo
      The repo in cloud/hosting service is the remote repo

Git commit: It is the standalone version of our project which has a reference to all the files nd folders that are part of that version.

Git Clone: It creates a linked local copy of the entire repository that will continue to synchronize with the target repository. Need author's permission to perform pull onto the original repository

Git Fork: It creates an independent copy of the entire repository to which a person has full access to. Does not need author's permission to perform any action such as merge pull push.

Git Sign: It consists of Commit Hash, Author, Date and Description of the commit

Commit Hash: It is hash which uses SHA-1 hashing algorithm consisting of 40 characters long string.


Git Spaces
1. Working Directory: Project folder where all our files resides
2. Staging area: Part of our repo. Rough draft space where we add updated version of our files or remove files in order to choose what we plan to include in our next commit. In .git, the staging area is file called "index"
3. Commit history: Part of our repo. This is where all our commits live after they have been made. In .git, the commit history is folder called "objects". Each commit points to the parent commit which is the commit that came vefore it.


Using Git Locally (Windows)
1. Download Git from the website
2. Go to your project folder -> Right Click -> Get GUI Bash here or get GUI here
3. In Bash, type command: git init
4. A hidden folder is created in our project folder: .git (git repo)
5. To see hidden folder: Go to control panel -> Appearance and Personaliztion -> File explorer -> Enable hidden files. Now you can see .git folder in your project folder
6. To check Git version in computer: Go to Terminal -> git --version


Using Git Remotely and Locally (in project folder cmd/GUI bash)
1. Link Git to a Github Account: git config --global user.username
2. In GitHub: New repository -> Name -> Create Repo
3. Link the remote and local repo: git remote add origin <link>
   link is from the GitHub repo
4. Give authorization
5. Push local file onto remote repo: git push origin main
6. Pull remote file/changes onto local fle: git pull origin main
7. In order to use git push instead of 5.: 
   Step 1: git push -u origin main
   Step 2: git push (from now on, just git push is enough)


Branch in Git
- It is the pointer to a commit
- The default branch is called main/master branch.
- master points to the most recent commit
- To find the hash of the commit (most recent commit) the master branch is pointing to:
  .git -> ref -> heads -> master -> Open to find hash
- The feature branch is the branch used for developers to make changes and file a pull request so that their changes are added in main branch


Using branches (commands in project folder -> GUI bash/cmd)
1. To see list of all branches: git branch
2. To create new branch: git branch branchname
3. To switch to a different branch: git checkout branchname
4. Then you can edit files in feature branch remotely or locally in vscode
5. To check differences in main and feature branch: git diff
6. After making changes, save, commit and push/pull to synchronize remotely and locally
7. In GitHub, make a pull request so that the author can check the request
8. Then the author can verify and merge the feature branch onto main branch
9. After merging, changes will be reflected in main branch
10. This can be pushed/pulled to synchronize remotely and locally
11. To delete a feature branch: git branch -d branchname
12. To merge feature branch onto main (be in main branch): git merge branchname


Commit steps
1. Edit files (Ex. Create a new file in project folder)
2. Open GUI Bash and type: git status (To check staging area)
3. To add file to staging area: git add filename.extension
   The files are copied from the working directory to the staging are and not moved
4. Check status: git status
5. To commit: git commit -m "message"
6. To check commit history: git log


Commands
1. To check Git version in computer: Go to Terminal -> git --version
2. To check status: git status (in GUI Bash)
3. To add file to staging area: git add filename.extension / git add 'file name.extension'
4. To delete file (which is present in previous commit but not in working directory): 
   git rm filename.extension
5. To restore file (which is present in previous commit but not in working directory): 
   git restore filename.extension
6. To commit: git commit -m "message" -m "Description which is optional"
7. To check commit history: git log
8. To edit the last commit: git commit --amend
9. Link Git to a Github Account: git config --global user.username
10. Link the remote and local repo: git remote add origin <link>
   link is from the GitHub repo
11. Push local file onto remote repo: git push origin main
12. Pull remote file/changes onto local fle: git pull origin main
13. Check username, email and other details: git config --list
14. Check remote repo connected to local file: git remote -v
15. In order to use git push instead of git push origin main: 
    Step 1: git push -u origin main
    Step 2: git push (from now on, just git push is enough)
16. To see list of all branches: git branch
17. To create new branch: git branch branchname
18. To switch to a different branch: git checkout branchname
19. To check differences in main and feature branch: git diff branchname
20. To check all differences: gif diff
21. To delete a feature branch: git branch -d branchname
22. To merge feature branch onto main (be in main branch): git merge branchname
23. To set user name: git config –global user.name “[name]”  
24. To set email address: git config –global user.email “[email address]”
25. To set repository-specific username/email configuration: 
    same as 23,24 but without -global
26. To stage and commit (only for edited files): git commit -am "message"
27. Undo staging: git reset filename.txt
28. Undo commit (point to last commit not 0): git reset HEAD~1
29. Hard Undo commit (remove from changes file too): git reset --hard HEAD~1 
30. To clone: git clone <link>
31. To format patch: git format-patch -1 <email kernel patch to repo>
32. To link upstream: git remote add upstream main_link
33. To check fetch and push repos: git remote -v
34. Commit with config file: git commit -s

IBM GIT Basics
Add username: git config –global user.name “Misbah Anjum N”
Add email: git –config –global user.email misbahanjumn@ibm.com
To check details: git config –list (or) cat ~/.gitconfig
To format patch: git format-patch -1 <email kernel patch to repo>
To link upstream: git remote add upstream main_link

Steps
1. Fork main repo into your own github account
2. Clone that forked repo locally
3. Use Link upstream command (32)
4. To check fetch and push links use command 33
5. Now select branch where file is present and make new changes to which ever file needed
6. Add file to the staging area
7. Commit the changes using config file (34)
8. In config file: give heading, changes description and in the end, mandatory, "Signed-off-by: Misbah Anjum N <misbahanjumn@ibm.com>"
9. To quit config file: :wq
10. Create a patch file using command 31 (Can view using ls)
11. Now push the changes to the fork
12. Create a pull request using the link generated from the above step

